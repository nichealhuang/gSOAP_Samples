/* calc.h
   Generated by wsdl2h 2.8.83 from calc-soap12.wsdl and typemap.dat
   2019-05-22 08:22:23 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on calc.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2019, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

tns = "http://tempuri.org/"
ns1 = "http://tempuri.org/Imports"
ns2 = "http://schemas.microsoft.com/2003/10/Serialization/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/Imports"
//gsoap ns1   schema namespace:	http://tempuri.org/Imports
//gsoap ns1   schema form:	unqualified

#define SOAP_NAMESPACE_OF_tns	"http://tempuri.org/"
//gsoap tns   schema namespace:	http://tempuri.org/
//gsoap tns   schema elementForm:	qualified
//gsoap tns   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns2	"http://schemas.microsoft.com/2003/10/Serialization/"
//gsoap ns2   schema namespace:	http://schemas.microsoft.com/2003/10/Serialization/
//gsoap ns2   schema form:	qualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD root type "xs:anyType".
///
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__anyType or a derived type.  Use option -P to remove this class.
class xsd__anyType
{ public:
    _XML __item;
    struct soap *soap;
};

/// Built-in type "xs:QName".
typedef std::string xsd__QName;

/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{ public:
    unsigned char *__ptr;
    int __size;
    char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
};

/// Built-in type "xs:byte".
typedef char xsd__byte;

/// Built-in type "xs:unsignedByte".
typedef unsigned char xsd__unsignedByte;

/// Primitive built-in type "xs:ID".
typedef std::string xsd__ID;

/// Class wrapper xsd__ID__ for built-in type "xs:ID" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__ID__ or a derived type.  Use option -P to remove this class.
class xsd__ID__ : public xsd__anyType
{ public:
    xsd__ID                              __item                        ;
};

/// Primitive built-in type "xs:IDREF".
typedef std::string xsd__IDREF;

/// Class wrapper xsd__IDREF__ for built-in type "xs:IDREF" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__IDREF__ or a derived type.  Use option -P to remove this class.
class xsd__IDREF__ : public xsd__anyType
{ public:
    xsd__IDREF                           __item                        ;
};

/// Class wrapper xsd__QName__ for built-in type "xs:QName" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__QName__ or a derived type.  Use option -P to remove this class.
class xsd__QName__ : public xsd__anyType
{ public:
    xsd__QName                           __item                        ;
};

/// Primitive built-in type "xs:anyURI".
typedef std::string xsd__anyURI;

/// Class wrapper xsd__anyURI__ for built-in type "xs:anyURI" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__anyURI__ or a derived type.  Use option -P to remove this class.
class xsd__anyURI__ : public xsd__anyType
{ public:
    xsd__anyURI                          __item                        ;
};

/// Class wrapper xsd__base64Binary__ for built-in type "xs:base64Binary" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__base64Binary__ or a derived type.  Use option -P to remove this class.
class xsd__base64Binary__ : public xsd__anyType
{ public:
    xsd__base64Binary                    __item                        ;
};

/// Class wrapper xsd__boolean_ for built-in type "xs:boolean" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__boolean_ or a derived type.  Use option -P to remove this class.
class xsd__boolean_ : public xsd__anyType
{ public:
    bool                                 __item                        ;
};

/// Class wrapper xsd__byte__ for built-in type "xs:byte" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__byte__ or a derived type.  Use option -P to remove this class.
class xsd__byte__ : public xsd__anyType
{ public:
    xsd__byte                            __item                        ;
};

/// Class wrapper xsd__dateTime_ for built-in type "xs:dateTime" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__dateTime_ or a derived type.  Use option -P to remove this class.
class xsd__dateTime_ : public xsd__anyType
{ public:
    time_t                               __item                        ;
};

/// Primitive built-in type "xs:decimal".
typedef std::string xsd__decimal;

/// Class wrapper xsd__decimal__ for built-in type "xs:decimal" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__decimal__ or a derived type.  Use option -P to remove this class.
class xsd__decimal__ : public xsd__anyType
{ public:
    xsd__decimal                         __item                        ;
};

/// Class wrapper xsd__double_ for built-in type "xs:double" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__double_ or a derived type.  Use option -P to remove this class.
class xsd__double_ : public xsd__anyType
{ public:
    double                               __item                        ;
};

/// Primitive built-in type "xs:duration".
typedef std::string xsd__duration;

/// Class wrapper xsd__duration__ for built-in type "xs:duration" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__duration__ or a derived type.  Use option -P to remove this class.
class xsd__duration__ : public xsd__anyType
{ public:
    xsd__duration                        __item                        ;
};

/// Class wrapper xsd__float_ for built-in type "xs:float" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__float_ or a derived type.  Use option -P to remove this class.
class xsd__float_ : public xsd__anyType
{ public:
    float                                __item                        ;
};

/// Class wrapper xsd__int_ for built-in type "xs:int" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__int_ or a derived type.  Use option -P to remove this class.
class xsd__int_ : public xsd__anyType
{ public:
    int                                  __item                        ;
};

/// Class wrapper xsd__long_ for built-in type "xs:long" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__long_ or a derived type.  Use option -P to remove this class.
class xsd__long_ : public xsd__anyType
{ public:
    LONG64                               __item                        ;
};

/// Class wrapper xsd__short_ for built-in type "xs:short" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__short_ or a derived type.  Use option -P to remove this class.
class xsd__short_ : public xsd__anyType
{ public:
    short                                __item                        ;
};

/// Class wrapper xsd__string_ for built-in type "xs:string" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__string_ or a derived type.  Use option -P to remove this class.
class xsd__string_ : public xsd__anyType
{ public:
    std::string                          __item                        ;
};

/// Class wrapper xsd__unsignedByte__ for built-in type "xs:unsignedByte" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__unsignedByte__ or a derived type.  Use option -P to remove this class.
class xsd__unsignedByte__ : public xsd__anyType
{ public:
    xsd__unsignedByte                    __item                        ;
};

/// Class wrapper xsd__unsignedInt_ for built-in type "xs:unsignedInt" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__unsignedInt_ or a derived type.  Use option -P to remove this class.
class xsd__unsignedInt_ : public xsd__anyType
{ public:
    unsigned int                         __item                        ;
};

/// Class wrapper xsd__unsignedLong_ for built-in type "xs:unsignedLong" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__unsignedLong_ or a derived type.  Use option -P to remove this class.
class xsd__unsignedLong_ : public xsd__anyType
{ public:
    ULONG64                              __item                        ;
};

/// Class wrapper xsd__unsignedShort_ for built-in type "xs:unsignedShort" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__unsignedShort_ or a derived type.  Use option -P to remove this class.
class xsd__unsignedShort_ : public xsd__anyType
{ public:
    unsigned short                       __item                        ;
};


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class _tns__Add;

class _tns__AddResponse;

class _tns__Subtract;

class _tns__SubtractResponse;

class _tns__Multiply;

class _tns__MultiplyResponse;

class _tns__Divide;

class _tns__DivideResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/

/// @brief "http://schemas.microsoft.com/2003/10/Serialization/":char is a simpleType restriction of type xs:int.
///
typedef int ns2__char;

/// @brief Class wrapper for type ns2__char derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class ns2__char__ : public xsd__anyType
{ public:
    ns2__char                            __item;                       
};

/// @brief "http://schemas.microsoft.com/2003/10/Serialization/":duration is a simpleType restriction of type xs:duration.
///
/// Content pattern is "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?".
/// Value range is -P10675199DT2H48M5.4775808S to P10675199DT2H48M5.4775807S.
typedef xsd__duration ns2__duration "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?";

/// @brief Class wrapper for type ns2__duration derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class ns2__duration__ : public xsd__anyType
{ public:
    ns2__duration                        __item;                       
};

/// @brief "http://schemas.microsoft.com/2003/10/Serialization/":guid is a simpleType restriction of type xs:string.
///
/// Content pattern is "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}".
typedef std::string ns2__guid "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}";

/// @brief Class wrapper for type ns2__guid derived from xsd__anyType.
///
/// @note Use option -P to remove this class.
class ns2__guid__ : public xsd__anyType
{ public:
    ns2__guid                            __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://tempuri.org/":Add
/// @brief "http://tempuri.org/":Add is a complexType.
///
/// @note class _tns__Add operations:
/// - _tns__Add* soap_new__tns__Add(soap*) allocate and default initialize
/// - _tns__Add* soap_new__tns__Add(soap*, int num) allocate and default initialize an array
/// - _tns__Add* soap_new_req__tns__Add(soap*, ...) allocate, set required members
/// - _tns__Add* soap_new_set__tns__Add(soap*, ...) allocate, set all public members
/// - _tns__Add::soap_default(soap*) default initialize members
/// - int soap_read__tns__Add(soap*, _tns__Add*) deserialize from a stream
/// - int soap_write__tns__Add(soap*, _tns__Add*) serialize to a stream
/// - _tns__Add* _tns__Add::soap_dup(soap*) returns deep copy of _tns__Add, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tns__Add::soap_del() deep deletes _tns__Add data members, use only after _tns__Add::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tns__Add::soap_type() returns SOAP_TYPE__tns__Add or derived type identifier
class _tns__Add
{ public:
/// Element "n1" of type xs:double.
    double*                              n1                             0;	///< Optional element.
/// Element "n2" of type xs:double.
    double*                              n2                             0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AddResponse
/// @brief "http://tempuri.org/":AddResponse is a complexType.
///
/// @note class _tns__AddResponse operations:
/// - _tns__AddResponse* soap_new__tns__AddResponse(soap*) allocate and default initialize
/// - _tns__AddResponse* soap_new__tns__AddResponse(soap*, int num) allocate and default initialize an array
/// - _tns__AddResponse* soap_new_req__tns__AddResponse(soap*, ...) allocate, set required members
/// - _tns__AddResponse* soap_new_set__tns__AddResponse(soap*, ...) allocate, set all public members
/// - _tns__AddResponse::soap_default(soap*) default initialize members
/// - int soap_read__tns__AddResponse(soap*, _tns__AddResponse*) deserialize from a stream
/// - int soap_write__tns__AddResponse(soap*, _tns__AddResponse*) serialize to a stream
/// - _tns__AddResponse* _tns__AddResponse::soap_dup(soap*) returns deep copy of _tns__AddResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tns__AddResponse::soap_del() deep deletes _tns__AddResponse data members, use only after _tns__AddResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tns__AddResponse::soap_type() returns SOAP_TYPE__tns__AddResponse or derived type identifier
class _tns__AddResponse
{ public:
/// Element "AddResult" of type xs:double.
    double*                              AddResult                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":Subtract
/// @brief "http://tempuri.org/":Subtract is a complexType.
///
/// @note class _tns__Subtract operations:
/// - _tns__Subtract* soap_new__tns__Subtract(soap*) allocate and default initialize
/// - _tns__Subtract* soap_new__tns__Subtract(soap*, int num) allocate and default initialize an array
/// - _tns__Subtract* soap_new_req__tns__Subtract(soap*, ...) allocate, set required members
/// - _tns__Subtract* soap_new_set__tns__Subtract(soap*, ...) allocate, set all public members
/// - _tns__Subtract::soap_default(soap*) default initialize members
/// - int soap_read__tns__Subtract(soap*, _tns__Subtract*) deserialize from a stream
/// - int soap_write__tns__Subtract(soap*, _tns__Subtract*) serialize to a stream
/// - _tns__Subtract* _tns__Subtract::soap_dup(soap*) returns deep copy of _tns__Subtract, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tns__Subtract::soap_del() deep deletes _tns__Subtract data members, use only after _tns__Subtract::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tns__Subtract::soap_type() returns SOAP_TYPE__tns__Subtract or derived type identifier
class _tns__Subtract
{ public:
/// Element "n1" of type xs:double.
    double*                              n1                             0;	///< Optional element.
/// Element "n2" of type xs:double.
    double*                              n2                             0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":SubtractResponse
/// @brief "http://tempuri.org/":SubtractResponse is a complexType.
///
/// @note class _tns__SubtractResponse operations:
/// - _tns__SubtractResponse* soap_new__tns__SubtractResponse(soap*) allocate and default initialize
/// - _tns__SubtractResponse* soap_new__tns__SubtractResponse(soap*, int num) allocate and default initialize an array
/// - _tns__SubtractResponse* soap_new_req__tns__SubtractResponse(soap*, ...) allocate, set required members
/// - _tns__SubtractResponse* soap_new_set__tns__SubtractResponse(soap*, ...) allocate, set all public members
/// - _tns__SubtractResponse::soap_default(soap*) default initialize members
/// - int soap_read__tns__SubtractResponse(soap*, _tns__SubtractResponse*) deserialize from a stream
/// - int soap_write__tns__SubtractResponse(soap*, _tns__SubtractResponse*) serialize to a stream
/// - _tns__SubtractResponse* _tns__SubtractResponse::soap_dup(soap*) returns deep copy of _tns__SubtractResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tns__SubtractResponse::soap_del() deep deletes _tns__SubtractResponse data members, use only after _tns__SubtractResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tns__SubtractResponse::soap_type() returns SOAP_TYPE__tns__SubtractResponse or derived type identifier
class _tns__SubtractResponse
{ public:
/// Element "SubtractResult" of type xs:double.
    double*                              SubtractResult                 0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":Multiply
/// @brief "http://tempuri.org/":Multiply is a complexType.
///
/// @note class _tns__Multiply operations:
/// - _tns__Multiply* soap_new__tns__Multiply(soap*) allocate and default initialize
/// - _tns__Multiply* soap_new__tns__Multiply(soap*, int num) allocate and default initialize an array
/// - _tns__Multiply* soap_new_req__tns__Multiply(soap*, ...) allocate, set required members
/// - _tns__Multiply* soap_new_set__tns__Multiply(soap*, ...) allocate, set all public members
/// - _tns__Multiply::soap_default(soap*) default initialize members
/// - int soap_read__tns__Multiply(soap*, _tns__Multiply*) deserialize from a stream
/// - int soap_write__tns__Multiply(soap*, _tns__Multiply*) serialize to a stream
/// - _tns__Multiply* _tns__Multiply::soap_dup(soap*) returns deep copy of _tns__Multiply, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tns__Multiply::soap_del() deep deletes _tns__Multiply data members, use only after _tns__Multiply::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tns__Multiply::soap_type() returns SOAP_TYPE__tns__Multiply or derived type identifier
class _tns__Multiply
{ public:
/// Element "n1" of type xs:double.
    double*                              n1                             0;	///< Optional element.
/// Element "n2" of type xs:double.
    double*                              n2                             0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":MultiplyResponse
/// @brief "http://tempuri.org/":MultiplyResponse is a complexType.
///
/// @note class _tns__MultiplyResponse operations:
/// - _tns__MultiplyResponse* soap_new__tns__MultiplyResponse(soap*) allocate and default initialize
/// - _tns__MultiplyResponse* soap_new__tns__MultiplyResponse(soap*, int num) allocate and default initialize an array
/// - _tns__MultiplyResponse* soap_new_req__tns__MultiplyResponse(soap*, ...) allocate, set required members
/// - _tns__MultiplyResponse* soap_new_set__tns__MultiplyResponse(soap*, ...) allocate, set all public members
/// - _tns__MultiplyResponse::soap_default(soap*) default initialize members
/// - int soap_read__tns__MultiplyResponse(soap*, _tns__MultiplyResponse*) deserialize from a stream
/// - int soap_write__tns__MultiplyResponse(soap*, _tns__MultiplyResponse*) serialize to a stream
/// - _tns__MultiplyResponse* _tns__MultiplyResponse::soap_dup(soap*) returns deep copy of _tns__MultiplyResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tns__MultiplyResponse::soap_del() deep deletes _tns__MultiplyResponse data members, use only after _tns__MultiplyResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tns__MultiplyResponse::soap_type() returns SOAP_TYPE__tns__MultiplyResponse or derived type identifier
class _tns__MultiplyResponse
{ public:
/// Element "MultiplyResult" of type xs:double.
    double*                              MultiplyResult                 0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":Divide
/// @brief "http://tempuri.org/":Divide is a complexType.
///
/// @note class _tns__Divide operations:
/// - _tns__Divide* soap_new__tns__Divide(soap*) allocate and default initialize
/// - _tns__Divide* soap_new__tns__Divide(soap*, int num) allocate and default initialize an array
/// - _tns__Divide* soap_new_req__tns__Divide(soap*, ...) allocate, set required members
/// - _tns__Divide* soap_new_set__tns__Divide(soap*, ...) allocate, set all public members
/// - _tns__Divide::soap_default(soap*) default initialize members
/// - int soap_read__tns__Divide(soap*, _tns__Divide*) deserialize from a stream
/// - int soap_write__tns__Divide(soap*, _tns__Divide*) serialize to a stream
/// - _tns__Divide* _tns__Divide::soap_dup(soap*) returns deep copy of _tns__Divide, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tns__Divide::soap_del() deep deletes _tns__Divide data members, use only after _tns__Divide::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tns__Divide::soap_type() returns SOAP_TYPE__tns__Divide or derived type identifier
class _tns__Divide
{ public:
/// Element "n1" of type xs:double.
    double*                              n1                             0;	///< Optional element.
/// Element "n2" of type xs:double.
    double*                              n2                             0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":DivideResponse
/// @brief "http://tempuri.org/":DivideResponse is a complexType.
///
/// @note class _tns__DivideResponse operations:
/// - _tns__DivideResponse* soap_new__tns__DivideResponse(soap*) allocate and default initialize
/// - _tns__DivideResponse* soap_new__tns__DivideResponse(soap*, int num) allocate and default initialize an array
/// - _tns__DivideResponse* soap_new_req__tns__DivideResponse(soap*, ...) allocate, set required members
/// - _tns__DivideResponse* soap_new_set__tns__DivideResponse(soap*, ...) allocate, set all public members
/// - _tns__DivideResponse::soap_default(soap*) default initialize members
/// - int soap_read__tns__DivideResponse(soap*, _tns__DivideResponse*) deserialize from a stream
/// - int soap_write__tns__DivideResponse(soap*, _tns__DivideResponse*) serialize to a stream
/// - _tns__DivideResponse* _tns__DivideResponse::soap_dup(soap*) returns deep copy of _tns__DivideResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _tns__DivideResponse::soap_del() deep deletes _tns__DivideResponse data members, use only after _tns__DivideResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _tns__DivideResponse::soap_type() returns SOAP_TYPE__tns__DivideResponse or derived type identifier
class _tns__DivideResponse
{ public:
/// Element "DivideResult" of type xs:double.
    double*                              DivideResult                   0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyType of type xs:anyType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyURI of type xs:anyURI.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":base64Binary of type xs:base64Binary.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":boolean of type xs:boolean.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":byte of type xs:byte.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":dateTime of type xs:dateTime.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":decimal of type xs:decimal.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":double of type xs:double.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":float of type xs:float.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":int of type xs:int.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":long of type xs:long.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":QName of type xs:QName.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":short of type xs:short.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":string of type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedByte of type xs:unsignedByte.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedInt of type xs:unsignedInt.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedLong of type xs:unsignedLong.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedShort of type xs:unsignedShort.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":char of type "http://schemas.microsoft.com/2003/10/Serialization/":char.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":duration of type "http://schemas.microsoft.com/2003/10/Serialization/":duration.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":guid of type "http://schemas.microsoft.com/2003/10/Serialization/":guid.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":FactoryType of simpleType xs:QName.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration.

/// @brief Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Id of simpleType xs:ID.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration.

/// @brief Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Ref of simpleType xs:IDREF.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration.


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap tns  service name:	WSHttpBinding_USCOREICalculator 
//gsoap tns  service type:	ICalculator 
//gsoap tns  service port:	http://localhost/HostedCalcService/service.svc 
//gsoap tns  service namespace:	http://tempuri.org/ 
//gsoap tns  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Calculator Definitions

@section Calculator_bindings Service Bindings

  - @ref WSHttpBinding_USCOREICalculator

@section Calculator_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page WSHttpBinding_USCOREICalculator Binding "WSHttpBinding_USCOREICalculator"

@section WSHttpBinding_USCOREICalculator_operations Operations of Binding "WSHttpBinding_USCOREICalculator"

  - @ref __tns__Add

  - @ref __tns__Subtract

  - @ref __tns__Multiply

  - @ref __tns__Divide

@section WSHttpBinding_USCOREICalculator_ports Default endpoints of Binding "WSHttpBinding_USCOREICalculator"

  - http://localhost/HostedCalcService/service.svc

@section WSHttpBinding_USCOREICalculator_policy Policy of Binding "WSHttpBinding_USCOREICalculator"

See Section @ref WSHttpBinding_USCOREICalculator_policy_enablers

  - WS-Policy applicable to the service endpoint ports:
	- Exactly one of the following:
		- All of the following:
			- [7.4] WS-Security Symmetric Binding requirements:
				- [7.1] Security Binding Algorithm Suite requirements:
					- Basic256
				- [7.2] WS-Security Header Layout requirements:
					- WS-Security headers 'declare before use' required (gSOAP default)
				- Symmetric Protection requirements:
					- [5.4.7] WS-SecureConversation required:
						- Properties   = WS-SecureConversation RequireDerivedKeys
						- SecureConversation BootstrapPolicy
							- [4.1.1] WS-Security Signed Parts requirements:
							  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
							  -# Header elements:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "ns3__To ns3__From ns3__FaultTo ns3__ReplyTo ns3__MessageID ns3__RelatesTo ns3__Action ");
	@endcode
							- [4.2.1] Security Encrypted Parts requirements:
							  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_encrypt_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
							- [7.4] WS-Security Symmetric Binding requirements:
								- [7.1] Security Binding Algorithm Suite requirements:
									- Basic256
								- [7.2] WS-Security Header Layout requirements:
									- WS-Security headers 'declare before use' required (gSOAP default)
								- Symmetric Protection requirements:
									- [5.4.5] WS-Trust n-leg RST/RSTR SPNEGO binary negotiation protocol (SpnegoContext) required:
									- Properties   = WS-SecureConversation RequireDerivedKeys
								- WS-Security Timestamp should be set prior to send:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_add_Timestamp(soap, "Timestamp", <seconds>);
	@endcode
								- WS-Security Timestamp presence and expiration verified post-receive with:
	@code
	#include "plugin/wsseapi.h"
	if (soap_wsse_verify_Timestamp(soap)) ...<error>...
	@endcode
								- WS-Security Encrypt Signature
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_add_EncryptedKey_encrypt_only(soap, <SOAP_MEC_ENV_ENC_xxx_CBC>, NULL, <cert>, NULL, <issuer>, <serial>, "ds:Signature SOAP-ENV:Body");
	@endcode
								- WS-Security Sign Entire Headers and Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "<ns:tagname1> <ns:tagname2> ..."); // list each ns:tagname used in SOAP Header
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
							- [9.2] WSS: SOAP Message Security 1.1 options:
							- [10.1] WS-Trust 1.0 options:
								- Client Entropy
								- Server Entropy
								- Issued Tokens
				- WS-Security Timestamp should be set prior to send:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_add_Timestamp(soap, "Timestamp", <seconds>);
	@endcode
				- WS-Security Timestamp presence and expiration verified post-receive with:
	@code
	#include "plugin/wsseapi.h"
	if (soap_wsse_verify_Timestamp(soap)) ...<error>...
	@endcode
				- WS-Security Encrypt Signature
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_add_EncryptedKey_encrypt_only(soap, <SOAP_MEC_ENV_ENC_xxx_CBC>, NULL, <cert>, NULL, <issuer>, <serial>, "ds:Signature SOAP-ENV:Body");
	@endcode
				- WS-Security Sign Entire Headers and Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "<ns:tagname1> <ns:tagname2> ..."); // list each ns:tagname used in SOAP Header
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
			- [9.2] WSS: SOAP Message Security 1.1 options:
			- [10.1] WS-Trust 1.0 options:
				- Client Entropy
				- Server Entropy
				- Issued Tokens
			- WS-Addressing is used

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   WSHttpBinding_USCOREICalculator                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__Add                                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__tns__Add" of service binding "WSHttpBinding_USCOREICalculator".

  - WS-Policy applicable to the request message:
	- Exactly one of the following:
		- All of the following:
			- [4.1.1] WS-Security Signed Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
			  -# Header elements:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "ns3__To ns3__From ns3__FaultTo ns3__ReplyTo ns3__MessageID ns3__RelatesTo ns3__Action ");
	@endcode
			- [4.2.1] Security Encrypted Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_encrypt_body(soap, <algorithm>, <key>, <keylen>);
	@endcode

  - WS-Policy applicable to the response message:
	- Exactly one of the following:
		- All of the following:
			- [4.1.1] WS-Security Signed Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
			  -# Header elements:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "ns3__To ns3__From ns3__FaultTo ns3__ReplyTo ns3__MessageID ns3__RelatesTo ns3__Action ");
	@endcode
			- [4.2.1] Security Encrypted Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_encrypt_body(soap, <algorithm>, <key>, <keylen>);
	@endcode

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost/HostedCalcService/service.svc

  - Default SOAP action or REST location path:
    - "http://tempuri.org/ICalculator/Add"

  - Addressing input action: "http://tempuri.org/ICalculator/Add"

  - Addressing output action: "http://tempuri.org/ICalculator/AddResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__Add(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tns__Add*                          tns__Add,
    // output parameters:
    _tns__AddResponse                  &tns__AddResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__Add(
    struct soap *soap,
    // input parameters:
    _tns__Add*                          tns__Add,
    // output parameters:
    _tns__AddResponse                  &tns__AddResponse
  );
@endcode

C++ proxy class (defined in soapWSHttpBinding_USCOREICalculatorProxy.h generated with soapcpp2):
@code
  class WSHttpBinding_USCOREICalculatorProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWSHttpBinding_USCOREICalculatorService.h generated with soapcpp2):
@code
  class WSHttpBinding_USCOREICalculatorService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tns  service method-protocol:	Add SOAP
//gsoap tns  service method-style:	Add document
//gsoap tns  service method-encoding:	Add literal
//gsoap tns  service method-input-action:	Add http://tempuri.org/ICalculator/Add
//gsoap tns  service method-output-action:	Add http://tempuri.org/ICalculator/AddResponse
int __tns__Add(
    _tns__Add*                          tns__Add,	///< Input parameter
    _tns__AddResponse                  &tns__AddResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__Subtract                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tns__Subtract" of service binding "WSHttpBinding_USCOREICalculator".

  - WS-Policy applicable to the request message:
	- Exactly one of the following:
		- All of the following:
			- [4.1.1] WS-Security Signed Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
			  -# Header elements:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "ns3__To ns3__From ns3__FaultTo ns3__ReplyTo ns3__MessageID ns3__RelatesTo ns3__Action ");
	@endcode
			- [4.2.1] Security Encrypted Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_encrypt_body(soap, <algorithm>, <key>, <keylen>);
	@endcode

  - WS-Policy applicable to the response message:
	- Exactly one of the following:
		- All of the following:
			- [4.1.1] WS-Security Signed Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
			  -# Header elements:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "ns3__To ns3__From ns3__FaultTo ns3__ReplyTo ns3__MessageID ns3__RelatesTo ns3__Action ");
	@endcode
			- [4.2.1] Security Encrypted Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_encrypt_body(soap, <algorithm>, <key>, <keylen>);
	@endcode

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost/HostedCalcService/service.svc

  - Default SOAP action or REST location path:
    - "http://tempuri.org/ICalculator/Subtract"

  - Addressing input action: "http://tempuri.org/ICalculator/Subtract"

  - Addressing output action: "http://tempuri.org/ICalculator/SubtractResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__Subtract(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tns__Subtract*                     tns__Subtract,
    // output parameters:
    _tns__SubtractResponse             &tns__SubtractResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__Subtract(
    struct soap *soap,
    // input parameters:
    _tns__Subtract*                     tns__Subtract,
    // output parameters:
    _tns__SubtractResponse             &tns__SubtractResponse
  );
@endcode

C++ proxy class (defined in soapWSHttpBinding_USCOREICalculatorProxy.h generated with soapcpp2):
@code
  class WSHttpBinding_USCOREICalculatorProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWSHttpBinding_USCOREICalculatorService.h generated with soapcpp2):
@code
  class WSHttpBinding_USCOREICalculatorService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tns  service method-protocol:	Subtract SOAP
//gsoap tns  service method-style:	Subtract document
//gsoap tns  service method-encoding:	Subtract literal
//gsoap tns  service method-input-action:	Subtract http://tempuri.org/ICalculator/Subtract
//gsoap tns  service method-output-action:	Subtract http://tempuri.org/ICalculator/SubtractResponse
int __tns__Subtract(
    _tns__Subtract*                     tns__Subtract,	///< Input parameter
    _tns__SubtractResponse             &tns__SubtractResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__Multiply                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tns__Multiply" of service binding "WSHttpBinding_USCOREICalculator".

  - WS-Policy applicable to the request message:
	- Exactly one of the following:
		- All of the following:
			- [4.1.1] WS-Security Signed Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
			  -# Header elements:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "ns3__To ns3__From ns3__FaultTo ns3__ReplyTo ns3__MessageID ns3__RelatesTo ns3__Action ");
	@endcode
			- [4.2.1] Security Encrypted Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_encrypt_body(soap, <algorithm>, <key>, <keylen>);
	@endcode

  - WS-Policy applicable to the response message:
	- Exactly one of the following:
		- All of the following:
			- [4.1.1] WS-Security Signed Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
			  -# Header elements:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "ns3__To ns3__From ns3__FaultTo ns3__ReplyTo ns3__MessageID ns3__RelatesTo ns3__Action ");
	@endcode
			- [4.2.1] Security Encrypted Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_encrypt_body(soap, <algorithm>, <key>, <keylen>);
	@endcode

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost/HostedCalcService/service.svc

  - Default SOAP action or REST location path:
    - "http://tempuri.org/ICalculator/Multiply"

  - Addressing input action: "http://tempuri.org/ICalculator/Multiply"

  - Addressing output action: "http://tempuri.org/ICalculator/MultiplyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__Multiply(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tns__Multiply*                     tns__Multiply,
    // output parameters:
    _tns__MultiplyResponse             &tns__MultiplyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__Multiply(
    struct soap *soap,
    // input parameters:
    _tns__Multiply*                     tns__Multiply,
    // output parameters:
    _tns__MultiplyResponse             &tns__MultiplyResponse
  );
@endcode

C++ proxy class (defined in soapWSHttpBinding_USCOREICalculatorProxy.h generated with soapcpp2):
@code
  class WSHttpBinding_USCOREICalculatorProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWSHttpBinding_USCOREICalculatorService.h generated with soapcpp2):
@code
  class WSHttpBinding_USCOREICalculatorService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tns  service method-protocol:	Multiply SOAP
//gsoap tns  service method-style:	Multiply document
//gsoap tns  service method-encoding:	Multiply literal
//gsoap tns  service method-input-action:	Multiply http://tempuri.org/ICalculator/Multiply
//gsoap tns  service method-output-action:	Multiply http://tempuri.org/ICalculator/MultiplyResponse
int __tns__Multiply(
    _tns__Multiply*                     tns__Multiply,	///< Input parameter
    _tns__MultiplyResponse             &tns__MultiplyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tns__Divide                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tns__Divide" of service binding "WSHttpBinding_USCOREICalculator".

  - WS-Policy applicable to the request message:
	- Exactly one of the following:
		- All of the following:
			- [4.1.1] WS-Security Signed Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
			  -# Header elements:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "ns3__To ns3__From ns3__FaultTo ns3__ReplyTo ns3__MessageID ns3__RelatesTo ns3__Action ");
	@endcode
			- [4.2.1] Security Encrypted Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_encrypt_body(soap, <algorithm>, <key>, <keylen>);
	@endcode

  - WS-Policy applicable to the response message:
	- Exactly one of the following:
		- All of the following:
			- [4.1.1] WS-Security Signed Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
			  -# Header elements:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "ns3__To ns3__From ns3__FaultTo ns3__ReplyTo ns3__MessageID ns3__RelatesTo ns3__Action ");
	@endcode
			- [4.2.1] Security Encrypted Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_encrypt_body(soap, <algorithm>, <key>, <keylen>);
	@endcode

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost/HostedCalcService/service.svc

  - Default SOAP action or REST location path:
    - "http://tempuri.org/ICalculator/Divide"

  - Addressing input action: "http://tempuri.org/ICalculator/Divide"

  - Addressing output action: "http://tempuri.org/ICalculator/DivideResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tns__Divide(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tns__Divide*                       tns__Divide,
    // output parameters:
    _tns__DivideResponse               &tns__DivideResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tns__Divide(
    struct soap *soap,
    // input parameters:
    _tns__Divide*                       tns__Divide,
    // output parameters:
    _tns__DivideResponse               &tns__DivideResponse
  );
@endcode

C++ proxy class (defined in soapWSHttpBinding_USCOREICalculatorProxy.h generated with soapcpp2):
@code
  class WSHttpBinding_USCOREICalculatorProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWSHttpBinding_USCOREICalculatorService.h generated with soapcpp2):
@code
  class WSHttpBinding_USCOREICalculatorService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tns  service method-protocol:	Divide SOAP
//gsoap tns  service method-style:	Divide document
//gsoap tns  service method-encoding:	Divide literal
//gsoap tns  service method-input-action:	Divide http://tempuri.org/ICalculator/Divide
//gsoap tns  service method-output-action:	Divide http://tempuri.org/ICalculator/DivideResponse
int __tns__Divide(
    _tns__Divide*                       tns__Divide,	///< Input parameter
    _tns__DivideResponse               &tns__DivideResponse	///< Output parameter
);

/**

@page WSHttpBinding_USCOREICalculator Binding "WSHttpBinding_USCOREICalculator"

@section WSHttpBinding_USCOREICalculator_policy_enablers Policy Enablers of Binding "WSHttpBinding_USCOREICalculator"

Based on policies and protocol requirements, this service requires importing "wsse.h" "wst.h" "wsa5.h"

  - WS-Policy reminders and enablers (when applicable):
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Discovery 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsddapi.h" // See the user guide gsoap/doc/wsdd/html/index.html
	@endcode
    - WS-Discovery 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsddapi.h" // See the user guide gsoap/doc/wsdd/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/

#import "wsse.h"
#import "wst.h"
#import "wsa5.h"

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDL and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://tempuri.org/Imports"

@section tns Top-level root elements of schema "http://tempuri.org/"

  - <tns:Add> @ref _tns__Add
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tns__Add(struct soap*, _tns__Add*);
    // Writer (returns SOAP_OK on success):
    soap_write__tns__Add(struct soap*, _tns__Add*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tns__Add(struct soap*, const char *URL, _tns__Add*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tns__Add(struct soap*, const char *URL, _tns__Add*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tns__Add(struct soap*, const char *URL, _tns__Add*);
    soap_POST_recv__tns__Add(struct soap*, _tns__Add*);
    @endcode

  - <tns:AddResponse> @ref _tns__AddResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tns__AddResponse(struct soap*, _tns__AddResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tns__AddResponse(struct soap*, _tns__AddResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tns__AddResponse(struct soap*, const char *URL, _tns__AddResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tns__AddResponse(struct soap*, const char *URL, _tns__AddResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tns__AddResponse(struct soap*, const char *URL, _tns__AddResponse*);
    soap_POST_recv__tns__AddResponse(struct soap*, _tns__AddResponse*);
    @endcode

  - <tns:Subtract> @ref _tns__Subtract
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tns__Subtract(struct soap*, _tns__Subtract*);
    // Writer (returns SOAP_OK on success):
    soap_write__tns__Subtract(struct soap*, _tns__Subtract*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tns__Subtract(struct soap*, const char *URL, _tns__Subtract*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tns__Subtract(struct soap*, const char *URL, _tns__Subtract*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tns__Subtract(struct soap*, const char *URL, _tns__Subtract*);
    soap_POST_recv__tns__Subtract(struct soap*, _tns__Subtract*);
    @endcode

  - <tns:SubtractResponse> @ref _tns__SubtractResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tns__SubtractResponse(struct soap*, _tns__SubtractResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tns__SubtractResponse(struct soap*, _tns__SubtractResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tns__SubtractResponse(struct soap*, const char *URL, _tns__SubtractResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tns__SubtractResponse(struct soap*, const char *URL, _tns__SubtractResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tns__SubtractResponse(struct soap*, const char *URL, _tns__SubtractResponse*);
    soap_POST_recv__tns__SubtractResponse(struct soap*, _tns__SubtractResponse*);
    @endcode

  - <tns:Multiply> @ref _tns__Multiply
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tns__Multiply(struct soap*, _tns__Multiply*);
    // Writer (returns SOAP_OK on success):
    soap_write__tns__Multiply(struct soap*, _tns__Multiply*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tns__Multiply(struct soap*, const char *URL, _tns__Multiply*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tns__Multiply(struct soap*, const char *URL, _tns__Multiply*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tns__Multiply(struct soap*, const char *URL, _tns__Multiply*);
    soap_POST_recv__tns__Multiply(struct soap*, _tns__Multiply*);
    @endcode

  - <tns:MultiplyResponse> @ref _tns__MultiplyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tns__MultiplyResponse(struct soap*, _tns__MultiplyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tns__MultiplyResponse(struct soap*, _tns__MultiplyResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tns__MultiplyResponse(struct soap*, const char *URL, _tns__MultiplyResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tns__MultiplyResponse(struct soap*, const char *URL, _tns__MultiplyResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tns__MultiplyResponse(struct soap*, const char *URL, _tns__MultiplyResponse*);
    soap_POST_recv__tns__MultiplyResponse(struct soap*, _tns__MultiplyResponse*);
    @endcode

  - <tns:Divide> @ref _tns__Divide
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tns__Divide(struct soap*, _tns__Divide*);
    // Writer (returns SOAP_OK on success):
    soap_write__tns__Divide(struct soap*, _tns__Divide*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tns__Divide(struct soap*, const char *URL, _tns__Divide*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tns__Divide(struct soap*, const char *URL, _tns__Divide*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tns__Divide(struct soap*, const char *URL, _tns__Divide*);
    soap_POST_recv__tns__Divide(struct soap*, _tns__Divide*);
    @endcode

  - <tns:DivideResponse> @ref _tns__DivideResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tns__DivideResponse(struct soap*, _tns__DivideResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tns__DivideResponse(struct soap*, _tns__DivideResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__tns__DivideResponse(struct soap*, const char *URL, _tns__DivideResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__tns__DivideResponse(struct soap*, const char *URL, _tns__DivideResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__tns__DivideResponse(struct soap*, const char *URL, _tns__DivideResponse*);
    soap_POST_recv__tns__DivideResponse(struct soap*, _tns__DivideResponse*);
    @endcode

@section ns2 Top-level root elements of schema "http://schemas.microsoft.com/2003/10/Serialization/"

  - <ns2:anyType> (use wsdl2h option -g to auto-generate type _ns2__anyType)

  - <ns2:anyURI> (use wsdl2h option -g to auto-generate type _ns2__anyURI)

  - <ns2:base64Binary> (use wsdl2h option -g to auto-generate type _ns2__base64Binary)

  - <ns2:boolean> (use wsdl2h option -g to auto-generate type _ns2__boolean)

  - <ns2:byte> (use wsdl2h option -g to auto-generate type _ns2__byte)

  - <ns2:dateTime> (use wsdl2h option -g to auto-generate type _ns2__dateTime)

  - <ns2:decimal> (use wsdl2h option -g to auto-generate type _ns2__decimal)

  - <ns2:double> (use wsdl2h option -g to auto-generate type _ns2__double)

  - <ns2:float> (use wsdl2h option -g to auto-generate type _ns2__float)

  - <ns2:int> (use wsdl2h option -g to auto-generate type _ns2__int)

  - <ns2:long> (use wsdl2h option -g to auto-generate type _ns2__long)

  - <ns2:QName> (use wsdl2h option -g to auto-generate type _ns2__QName)

  - <ns2:short> (use wsdl2h option -g to auto-generate type _ns2__short)

  - <ns2:string> (use wsdl2h option -g to auto-generate type _ns2__string)

  - <ns2:unsignedByte> (use wsdl2h option -g to auto-generate type _ns2__unsignedByte)

  - <ns2:unsignedInt> (use wsdl2h option -g to auto-generate type _ns2__unsignedInt)

  - <ns2:unsignedLong> (use wsdl2h option -g to auto-generate type _ns2__unsignedLong)

  - <ns2:unsignedShort> (use wsdl2h option -g to auto-generate type _ns2__unsignedShort)

  - <ns2:char> (use wsdl2h option -g to auto-generate type _ns2__char)

  - <ns2:duration> (use wsdl2h option -g to auto-generate type _ns2__duration)

  - <ns2:guid> (use wsdl2h option -g to auto-generate type _ns2__guid)

*/

/* End of calc.h */
