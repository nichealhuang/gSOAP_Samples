/* soapWSHttpBinding_USCOREICalculatorService.cpp
   Generated by gSOAP 2.8.83 for C:\hands-on\git\gSOAP_Samples\calcStandaloneServer_soap12\calc.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapWSHttpBinding_USCOREICalculatorService.h"

WSHttpBinding_USCOREICalculatorService::WSHttpBinding_USCOREICalculatorService()
{	this->soap = soap_new();
	this->soap_own = true;
	WSHttpBinding_USCOREICalculatorService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

WSHttpBinding_USCOREICalculatorService::WSHttpBinding_USCOREICalculatorService(const WSHttpBinding_USCOREICalculatorService& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
}

WSHttpBinding_USCOREICalculatorService::WSHttpBinding_USCOREICalculatorService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	WSHttpBinding_USCOREICalculatorService_init(_soap->imode, _soap->omode);
}

WSHttpBinding_USCOREICalculatorService::WSHttpBinding_USCOREICalculatorService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	WSHttpBinding_USCOREICalculatorService_init(iomode, iomode);
}

WSHttpBinding_USCOREICalculatorService::WSHttpBinding_USCOREICalculatorService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	WSHttpBinding_USCOREICalculatorService_init(imode, omode);
}

WSHttpBinding_USCOREICalculatorService::~WSHttpBinding_USCOREICalculatorService()
{	if (this->soap_own)
	{	this->destroy();
		soap_free(this->soap);
	}
}

void WSHttpBinding_USCOREICalculatorService::WSHttpBinding_USCOREICalculatorService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL },
        { "SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ns2", "http://schemas.microsoft.com/2003/10/Serialization/", NULL, NULL },
        { "tns", "http://tempuri.org/", NULL, NULL },
        { "c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL },
        { "ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL },
        { "saml1", "urn:oasis:names:tc:SAML:1.0:assertion", NULL, NULL },
        { "saml2", "urn:oasis:names:tc:SAML:2.0:assertion", NULL, NULL },
        { "xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL },
        { "wsc", "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512", "http://schemas.xmlsoap.org/ws/2005/02/sc", NULL },
        { "wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL },
        { "chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL },
        { "wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL },
        { "wsp", "http://schemas.xmlsoap.org/ws/2004/09/policy", NULL, NULL },
        { "wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL },
        { "wst", "http://docs.oasis-open.org/ws-sx/ws-trust/200512", "http://schemas.xmlsoap.org/ws/2005/02/trust", NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

void WSHttpBinding_USCOREICalculatorService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void WSHttpBinding_USCOREICalculatorService::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	WSHttpBinding_USCOREICalculatorService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
WSHttpBinding_USCOREICalculatorService *WSHttpBinding_USCOREICalculatorService::copy()
{	WSHttpBinding_USCOREICalculatorService *dup = SOAP_NEW_UNMANAGED(WSHttpBinding_USCOREICalculatorService);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}
#endif

WSHttpBinding_USCOREICalculatorService& WSHttpBinding_USCOREICalculatorService::operator=(const WSHttpBinding_USCOREICalculatorService& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
	}
	return *this;
}

int WSHttpBinding_USCOREICalculatorService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int WSHttpBinding_USCOREICalculatorService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int WSHttpBinding_USCOREICalculatorService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int WSHttpBinding_USCOREICalculatorService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int WSHttpBinding_USCOREICalculatorService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int WSHttpBinding_USCOREICalculatorService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void WSHttpBinding_USCOREICalculatorService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void WSHttpBinding_USCOREICalculatorService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *WSHttpBinding_USCOREICalculatorService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void WSHttpBinding_USCOREICalculatorService::soap_noheader()
{	this->soap->header = NULL;
}

void WSHttpBinding_USCOREICalculatorService::soap_header(struct _wsse__Security *wsse__Security, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, int __sizeIssuedTokens, struct wst__RequestSecurityTokenResponseCollectionType *wst__IssuedTokens, char *wst__RequestType)
{
	::soap_header(this->soap);
	this->soap->header->wsse__Security = wsse__Security;
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
	this->soap->header->__sizeIssuedTokens = __sizeIssuedTokens;
	this->soap->header->wst__IssuedTokens = wst__IssuedTokens;
	this->soap->header->wst__RequestType = wst__RequestType;
}

::SOAP_ENV__Header *WSHttpBinding_USCOREICalculatorService::soap_header()
{	return this->soap->header;
}

#ifndef WITH_NOIO
int WSHttpBinding_USCOREICalculatorService::run(int port, int backlog)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int WSHttpBinding_USCOREICalculatorService::ssl_run(int port, int backlog)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}
#endif

SOAP_SOCKET WSHttpBinding_USCOREICalculatorService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET WSHttpBinding_USCOREICalculatorService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int WSHttpBinding_USCOREICalculatorService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif
#endif

int WSHttpBinding_USCOREICalculatorService::serve()
{
#ifndef WITH_FASTCGI
	this->soap->keep_alive = this->soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->soap->keep_alive > 0 && this->soap->max_keep_alive > 0)
			this->soap->keep_alive--;
#endif
		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if ((dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap))) && this->soap->error && this->soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___tns__Add(struct soap*, WSHttpBinding_USCOREICalculatorService*);
static int serve___tns__Subtract(struct soap*, WSHttpBinding_USCOREICalculatorService*);
static int serve___tns__Multiply(struct soap*, WSHttpBinding_USCOREICalculatorService*);
static int serve___tns__Divide(struct soap*, WSHttpBinding_USCOREICalculatorService*);

int WSHttpBinding_USCOREICalculatorService::dispatch()
{	return dispatch(this->soap);
}

int WSHttpBinding_USCOREICalculatorService::dispatch(struct soap* soap)
{
	WSHttpBinding_USCOREICalculatorService_init(soap->imode, soap->omode);
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "tns:Add"))
		return serve___tns__Add(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tns:Subtract"))
		return serve___tns__Subtract(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tns:Multiply"))
		return serve___tns__Multiply(soap, this);
	if (!soap_match_tag(soap, soap->tag, "tns:Divide"))
		return serve___tns__Divide(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___tns__Add(struct soap *soap, WSHttpBinding_USCOREICalculatorService *service)
{	struct __tns__Add soap_tmp___tns__Add;
	_tns__AddResponse tns__AddResponse;
	tns__AddResponse.soap_default(soap);
	soap_default___tns__Add(soap, &soap_tmp___tns__Add);
	if (!soap_get___tns__Add(soap, &soap_tmp___tns__Add, "-tns:Add", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Add(soap_tmp___tns__Add.tns__Add, tns__AddResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tns__AddResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tns__AddResponse.soap_put(soap, "tns:AddResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tns__AddResponse.soap_put(soap, "tns:AddResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tns__Subtract(struct soap *soap, WSHttpBinding_USCOREICalculatorService *service)
{	struct __tns__Subtract soap_tmp___tns__Subtract;
	_tns__SubtractResponse tns__SubtractResponse;
	tns__SubtractResponse.soap_default(soap);
	soap_default___tns__Subtract(soap, &soap_tmp___tns__Subtract);
	if (!soap_get___tns__Subtract(soap, &soap_tmp___tns__Subtract, "-tns:Subtract", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Subtract(soap_tmp___tns__Subtract.tns__Subtract, tns__SubtractResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tns__SubtractResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tns__SubtractResponse.soap_put(soap, "tns:SubtractResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tns__SubtractResponse.soap_put(soap, "tns:SubtractResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tns__Multiply(struct soap *soap, WSHttpBinding_USCOREICalculatorService *service)
{	struct __tns__Multiply soap_tmp___tns__Multiply;
	_tns__MultiplyResponse tns__MultiplyResponse;
	tns__MultiplyResponse.soap_default(soap);
	soap_default___tns__Multiply(soap, &soap_tmp___tns__Multiply);
	if (!soap_get___tns__Multiply(soap, &soap_tmp___tns__Multiply, "-tns:Multiply", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Multiply(soap_tmp___tns__Multiply.tns__Multiply, tns__MultiplyResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tns__MultiplyResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tns__MultiplyResponse.soap_put(soap, "tns:MultiplyResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tns__MultiplyResponse.soap_put(soap, "tns:MultiplyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tns__Divide(struct soap *soap, WSHttpBinding_USCOREICalculatorService *service)
{	struct __tns__Divide soap_tmp___tns__Divide;
	_tns__DivideResponse tns__DivideResponse;
	tns__DivideResponse.soap_default(soap);
	soap_default___tns__Divide(soap, &soap_tmp___tns__Divide);
	if (!soap_get___tns__Divide(soap, &soap_tmp___tns__Divide, "-tns:Divide", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Divide(soap_tmp___tns__Divide.tns__Divide, tns__DivideResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	tns__DivideResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || tns__DivideResponse.soap_put(soap, "tns:DivideResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || tns__DivideResponse.soap_put(soap, "tns:DivideResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
